/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8-dev */

#ifndef PB_COMPLETE_PB_H_INCLUDED
#define PB_COMPLETE_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _InputMode {
    InputMode_XInput = 0,
    InputMode_Switch = 1,
    InputMode_Hid = 2,
    InputMode_Config = 255
} InputMode;

typedef enum _DpadMode {
    DpadMode_Digital = 0,
    DpadMode_LeftAnalog = 1,
    DpadMode_RightAnalog = 2
} DpadMode;

typedef enum _ButtonLayout {
    ButtonLayout_BUTTON_LAYOUT_STICK = 0,
    ButtonLayout_BUTTON_LAYOUT_STICKLESS = 1,
    ButtonLayout_BUTTON_LAYOUT_BUTTONS_ANGLED = 2,
    ButtonLayout_BUTTON_LAYOUT_BUTTONS_BASIC = 3,
    ButtonLayout_BUTTON_LAYOUT_KEYBOARD_ANGLED = 4,
    ButtonLayout_BUTTON_LAYOUT_KEYBOARDA = 5,
    ButtonLayout_BUTTON_LAYOUT_DANCEPADA = 6,
    ButtonLayout_BUTTON_LAYOUT_TWINSTICKA = 7,
    ButtonLayout_BUTTON_LAYOUT_BLANKA = 8,
    ButtonLayout_BUTTON_LAYOUT_VLXA = 9,
    ButtonLayout_BUTTON_LAYOUT_FIGHTBOARD_STICK = 10,
    ButtonLayout_BUTTON_LAYOUT_FIGHTBOARD_MIRRORED = 11,
    ButtonLayout_BUTTON_LAYOUT_CUSTOMA = 12
} ButtonLayout;

typedef enum _ButtonLayoutRight {
    ButtonLayoutRight_BUTTON_LAYOUT_ARCADE = 1,
    ButtonLayoutRight_BUTTON_LAYOUT_STICKLESSB = 2,
    ButtonLayoutRight_BUTTON_LAYOUT_BUTTONS_ANGLEDB = 3,
    ButtonLayoutRight_BUTTON_LAYOUT_VEWLIX = 4,
    ButtonLayoutRight_BUTTON_LAYOUT_VEWLIX7 = 5,
    ButtonLayoutRight_BUTTON_LAYOUT_CAPCOM = 6,
    ButtonLayoutRight_BUTTON_LAYOUT_CAPCOM6 = 7,
    ButtonLayoutRight_BUTTON_LAYOUT_SEGA2P = 8,
    ButtonLayoutRight_BUTTON_LAYOUT_NOIR8 = 9,
    ButtonLayoutRight_BUTTON_LAYOUT_KEYBOARDB = 10,
    ButtonLayoutRight_BUTTON_LAYOUT_DANCEPADB = 11,
    ButtonLayoutRight_BUTTON_LAYOUT_TWINSTICKB = 12,
    ButtonLayoutRight_BUTTON_LAYOUT_BLANKB = 13,
    ButtonLayoutRight_BUTTON_LAYOUT_VLXB = 14,
    ButtonLayoutRight_BUTTON_LAYOUT_FIGHTBOARD = 15,
    ButtonLayoutRight_BUTTON_LAYOUT_FIGHTBOARD_STICK_MIRRORED = 16,
    ButtonLayoutRight_BUTTON_LAYOUT_CUSTOMB = 17
} ButtonLayoutRight;

typedef enum _SplashMode {
    SplashMode_STATICSPLASH = 0,
    SplashMode_CLOSEIN = 1,
    SplashMode_CLOSEINCUSTOM = 2,
    SplashMode_NOSPLASH = 3
} SplashMode;

typedef enum _SplashChoice {
    SplashChoice_MAIN = 0,
    SplashChoice_X = 1,
    SplashChoice_Y = 2,
    SplashChoice_Z = 3,
    SplashChoice_CUSTOM = 4,
    SplashChoice_LEGACY = 5
} SplashChoice;

typedef enum _OnBoardLedMode {
    OnBoardLedMode_BOARD_LED_OFF = 0,
    OnBoardLedMode_MODE_INDICATOR = 1,
    OnBoardLedMode_INPUT_TEST = 2
} OnBoardLedMode;

typedef enum _LEDFormat {
    LEDFormat_LED_FORMAT_GRB = 0,
    LEDFormat_LED_FORMAT_RGB = 1,
    LEDFormat_LED_FORMAT_GRBW = 2,
    LEDFormat_LED_FORMAT_RGBW = 3
} LEDFormat;

/* Struct definitions */
typedef struct _GamepadOptions {
    bool has_inputMode;
    InputMode inputMode;
    bool has_dpadMode;
    DpadMode dpadMode;
} GamepadOptions;

typedef struct _ButtonLayoutParams {
    pb_size_t which_layout;
    union {
        ButtonLayout left;
        ButtonLayoutRight right;
    } layout;
    bool has_startX;
    int32_t startX;
    bool has_startY;
    int32_t startY;
    bool has_buttonRadius;
    int32_t buttonRadius;
    bool has_buttonPadding;
    int32_t buttonPadding;
} ButtonLayoutParams;

typedef struct _ButtonLayoutCustomOptions {
    bool has_params;
    ButtonLayoutParams params;
    bool has_paramsRight;
    ButtonLayoutParams paramsRight;
} ButtonLayoutCustomOptions;

typedef struct _BoardOptions {
    bool has_hasBoardOptions;
    bool hasBoardOptions;
    bool has_pinDpadUp;
    int32_t pinDpadUp;
    bool has_pinDpadDown;
    int32_t pinDpadDown;
    bool has_pinDpadLeft;
    int32_t pinDpadLeft;
    bool has_pinDpadRight;
    int32_t pinDpadRight;
    bool has_pinButtonB1;
    int32_t pinButtonB1;
    bool has_pinButtonB2;
    int32_t pinButtonB2;
    bool has_pinButtonB3;
    int32_t pinButtonB3;
    bool has_pinButtonB4;
    int32_t pinButtonB4;
    bool has_pinButtonL1;
    int32_t pinButtonL1;
    bool has_pinButtonR1;
    int32_t pinButtonR1;
    bool has_pinButtonL2;
    int32_t pinButtonL2;
    bool has_pinButtonR2;
    int32_t pinButtonR2;
    bool has_pinButtonS1;
    int32_t pinButtonS1;
    bool has_pinButtonS2;
    int32_t pinButtonS2;
    bool has_pinButtonL3;
    int32_t pinButtonL3;
    bool has_pinButtonR3;
    int32_t pinButtonR3;
    bool has_pinButtonA1;
    int32_t pinButtonA1;
    bool has_pinButtonA2;
    int32_t pinButtonA2;
    bool has_buttonLayout;
    ButtonLayout buttonLayout;
    bool has_buttonLayoutRight;
    ButtonLayoutRight buttonLayoutRight;
    bool has_splashMode;
    SplashMode splashMode;
    bool has_splashChoice;
    SplashChoice splashChoice;
    bool has_splashDuration;
    int32_t splashDuration;
    bool has_i2cSDAPin;
    int32_t i2cSDAPin;
    bool has_i2cSCLPin;
    int32_t i2cSCLPin;
    bool has_i2cBlock;
    int32_t i2cBlock;
    bool has_i2cSpeed;
    uint32_t i2cSpeed;
    bool has_hasI2CDisplay;
    bool hasI2CDisplay;
    bool has_displayI2CAddress;
    int32_t displayI2CAddress;
    bool has_displaySize;
    int32_t displaySize;
    bool has_displayFlip;
    int32_t displayFlip;
    bool has_displayInvert;
    bool displayInvert;
    bool has_displaySaverTimeout;
    int32_t displaySaverTimeout;
    bool has_buttonLayoutCustomOptions;
    ButtonLayoutCustomOptions buttonLayoutCustomOptions;
    bool has_boardVersion;
    char boardVersion[32];
} BoardOptions;

typedef struct _AddonOptions {
    bool has_pinButtonTurbo;
    uint32_t pinButtonTurbo;
    bool has_pinButtonReverse;
    uint32_t pinButtonReverse;
    bool has_pinSliderLS;
    uint32_t pinSliderLS;
    bool has_pinSliderRS;
    uint32_t pinSliderRS;
    bool has_turboShotCount;
    uint32_t turboShotCount; /* Turbo */
    bool has_pinTurboLED;
    uint32_t pinTurboLED; /* Turbo LED */
    bool has_pinReverseLED;
    uint32_t pinReverseLED; /* Reverse LED */
    bool has_reverseActionUp;
    uint32_t reverseActionUp;
    bool has_reverseActionDown;
    uint32_t reverseActionDown;
    bool has_reverseActionLeft;
    uint32_t reverseActionLeft;
    bool has_reverseActionRight;
    uint32_t reverseActionRight;
    bool has_i2cAnalog1219SDAPin;
    uint32_t i2cAnalog1219SDAPin;
    bool has_i2cAnalog1219SCLPin;
    uint32_t i2cAnalog1219SCLPin;
    bool has_i2cAnalog1219Block;
    int32_t i2cAnalog1219Block;
    bool has_i2cAnalog1219Speed;
    uint32_t i2cAnalog1219Speed;
    bool has_i2cAnalog1219Address;
    uint32_t i2cAnalog1219Address;
    bool has_pinDualDirUp;
    uint32_t pinDualDirUp; /* Pins for Dual Directional Input */
    bool has_pinDualDirDown;
    uint32_t pinDualDirDown;
    bool has_pinDualDirLeft;
    uint32_t pinDualDirLeft;
    bool has_pinDualDirRight;
    uint32_t pinDualDirRight;
    bool has_dualDirDpadMode;
    DpadMode dualDirDpadMode; /* LS/DP/RS */
    bool has_dualDirCombineMode;
    uint32_t dualDirCombineMode; /* Mix/Gamepad/Dual/None */
    bool has_onBoardLedMode;
    OnBoardLedMode onBoardLedMode;
    bool has_analogAdcPinX;
    uint32_t analogAdcPinX;
    bool has_analogAdcPinY;
    uint32_t analogAdcPinY;
    bool has_bootselButtonMap;
    uint32_t bootselButtonMap;
    bool has_extraButtonPin;
    uint32_t extraButtonPin;
    bool has_extraButtonMap;
    uint32_t extraButtonMap;
    bool has_buzzerPin;
    uint32_t buzzerPin;
    bool has_buzzerVolume;
    uint32_t buzzerVolume;
    bool has_playerNumber;
    uint32_t playerNumber;
    bool has_AnalogInputEnabled;
    bool AnalogInputEnabled;
    bool has_BoardLedAddonEnabled;
    bool BoardLedAddonEnabled;
    bool has_BootselButtonAddonEnabled;
    bool BootselButtonAddonEnabled;
    bool has_BuzzerSpeakerAddonEnabled;
    bool BuzzerSpeakerAddonEnabled;
    bool has_DualDirectionalInputEnabled;
    bool DualDirectionalInputEnabled;
    bool has_ExtraButtonAddonEnabled;
    bool ExtraButtonAddonEnabled;
    bool has_I2CAnalog1219InputEnabled;
    bool I2CAnalog1219InputEnabled;
    bool has_JSliderInputEnabled;
    bool JSliderInputEnabled;
    bool has_PlayerNumAddonEnabled;
    bool PlayerNumAddonEnabled;
    bool has_ReverseInputEnabled;
    bool ReverseInputEnabled;
    bool has_TurboInputEnabled;
    bool TurboInputEnabled;
} AddonOptions;

typedef struct _SplashImage {
    bool has_data;
    pb_byte_t data[1024];
} SplashImage;

typedef struct _LEDOptions {
    bool has_useUserDefinedLEDs;
    bool useUserDefinedLEDs;
    bool has_dataPin;
    int32_t dataPin;
    bool has_ledFormat;
    LEDFormat ledFormat;
    bool has_ledLayout;
    ButtonLayout ledLayout;
    bool has_ledsPerButton;
    uint32_t ledsPerButton;
    bool has_brightnessMaximum;
    uint32_t brightnessMaximum;
    bool has_brightnessSteps;
    uint32_t brightnessSteps;
    bool has_indexUp;
    int32_t indexUp;
    bool has_indexDown;
    int32_t indexDown;
    bool has_indexLeft;
    int32_t indexLeft;
    bool has_indexRight;
    int32_t indexRight;
    bool has_indexB1;
    int32_t indexB1;
    bool has_indexB2;
    int32_t indexB2;
    bool has_indexB3;
    int32_t indexB3;
    bool has_indexB4;
    int32_t indexB4;
    bool has_indexL1;
    int32_t indexL1;
    bool has_indexR1;
    int32_t indexR1;
    bool has_indexL2;
    int32_t indexL2;
    bool has_indexR2;
    int32_t indexR2;
    bool has_indexS1;
    int32_t indexS1;
    bool has_indexS2;
    int32_t indexS2;
    bool has_indexL3;
    int32_t indexL3;
    bool has_indexR3;
    int32_t indexR3;
    bool has_indexA1;
    int32_t indexA1;
    bool has_indexA2;
    int32_t indexA2;
} LEDOptions;

typedef struct _Settings {
    bool has_gamepadOptions;
    GamepadOptions gamepadOptions;
    bool has_boardOptions;
    BoardOptions boardOptions;
    bool has_addonOptions;
    AddonOptions addonOptions;
    bool has_splashImage;
    SplashImage splashImage;
    bool has_ledOptions;
    LEDOptions ledOptions;
} Settings;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _InputMode_MIN InputMode_XInput
#define _InputMode_MAX InputMode_Config
#define _InputMode_ARRAYSIZE ((InputMode)(InputMode_Config+1))

#define _DpadMode_MIN DpadMode_Digital
#define _DpadMode_MAX DpadMode_RightAnalog
#define _DpadMode_ARRAYSIZE ((DpadMode)(DpadMode_RightAnalog+1))

#define _ButtonLayout_MIN ButtonLayout_BUTTON_LAYOUT_STICK
#define _ButtonLayout_MAX ButtonLayout_BUTTON_LAYOUT_CUSTOMA
#define _ButtonLayout_ARRAYSIZE ((ButtonLayout)(ButtonLayout_BUTTON_LAYOUT_CUSTOMA+1))

#define _ButtonLayoutRight_MIN ButtonLayoutRight_BUTTON_LAYOUT_ARCADE
#define _ButtonLayoutRight_MAX ButtonLayoutRight_BUTTON_LAYOUT_CUSTOMB
#define _ButtonLayoutRight_ARRAYSIZE ((ButtonLayoutRight)(ButtonLayoutRight_BUTTON_LAYOUT_CUSTOMB+1))

#define _SplashMode_MIN SplashMode_STATICSPLASH
#define _SplashMode_MAX SplashMode_NOSPLASH
#define _SplashMode_ARRAYSIZE ((SplashMode)(SplashMode_NOSPLASH+1))

#define _SplashChoice_MIN SplashChoice_MAIN
#define _SplashChoice_MAX SplashChoice_LEGACY
#define _SplashChoice_ARRAYSIZE ((SplashChoice)(SplashChoice_LEGACY+1))

#define _OnBoardLedMode_MIN OnBoardLedMode_BOARD_LED_OFF
#define _OnBoardLedMode_MAX OnBoardLedMode_INPUT_TEST
#define _OnBoardLedMode_ARRAYSIZE ((OnBoardLedMode)(OnBoardLedMode_INPUT_TEST+1))

#define _LEDFormat_MIN LEDFormat_LED_FORMAT_GRB
#define _LEDFormat_MAX LEDFormat_LED_FORMAT_RGBW
#define _LEDFormat_ARRAYSIZE ((LEDFormat)(LEDFormat_LED_FORMAT_RGBW+1))


#define GamepadOptions_inputMode_ENUMTYPE InputMode
#define GamepadOptions_dpadMode_ENUMTYPE DpadMode

#define ButtonLayoutParams_layout_left_ENUMTYPE ButtonLayout
#define ButtonLayoutParams_layout_right_ENUMTYPE ButtonLayoutRight


#define BoardOptions_buttonLayout_ENUMTYPE ButtonLayout
#define BoardOptions_buttonLayoutRight_ENUMTYPE ButtonLayoutRight
#define BoardOptions_splashMode_ENUMTYPE SplashMode
#define BoardOptions_splashChoice_ENUMTYPE SplashChoice

#define AddonOptions_dualDirDpadMode_ENUMTYPE DpadMode
#define AddonOptions_onBoardLedMode_ENUMTYPE OnBoardLedMode


#define LEDOptions_ledFormat_ENUMTYPE LEDFormat
#define LEDOptions_ledLayout_ENUMTYPE ButtonLayout


/* Initializer values for message structs */
#define Settings_init_default                    {false, GamepadOptions_init_default, false, BoardOptions_init_default, false, AddonOptions_init_default, false, SplashImage_init_default, false, LEDOptions_init_default}
#define GamepadOptions_init_default              {false, _InputMode_MIN, false, _DpadMode_MIN}
#define ButtonLayoutParams_init_default          {0, {_ButtonLayout_MIN}, false, 0, false, 0, false, 0, false, 0}
#define ButtonLayoutCustomOptions_init_default   {false, ButtonLayoutParams_init_default, false, ButtonLayoutParams_init_default}
#define BoardOptions_init_default                {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _ButtonLayout_MIN, false, _ButtonLayoutRight_MIN, false, _SplashMode_MIN, false, _SplashChoice_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, ButtonLayoutCustomOptions_init_default, false, "v0.6.1"}
#define AddonOptions_init_default                {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _DpadMode_MIN, false, 0, false, _OnBoardLedMode_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define SplashImage_init_default                 {false, {0}}
#define LEDOptions_init_default                  {false, 0, false, 0, false, _LEDFormat_MIN, false, _ButtonLayout_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define Settings_init_zero                       {false, GamepadOptions_init_zero, false, BoardOptions_init_zero, false, AddonOptions_init_zero, false, SplashImage_init_zero, false, LEDOptions_init_zero}
#define GamepadOptions_init_zero                 {false, _InputMode_MIN, false, _DpadMode_MIN}
#define ButtonLayoutParams_init_zero             {0, {_ButtonLayout_MIN}, false, 0, false, 0, false, 0, false, 0}
#define ButtonLayoutCustomOptions_init_zero      {false, ButtonLayoutParams_init_zero, false, ButtonLayoutParams_init_zero}
#define BoardOptions_init_zero                   {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _ButtonLayout_MIN, false, _ButtonLayoutRight_MIN, false, _SplashMode_MIN, false, _SplashChoice_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, ButtonLayoutCustomOptions_init_zero, false, ""}
#define AddonOptions_init_zero                   {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, _DpadMode_MIN, false, 0, false, _OnBoardLedMode_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define SplashImage_init_zero                    {false, {0}}
#define LEDOptions_init_zero                     {false, 0, false, 0, false, _LEDFormat_MIN, false, _ButtonLayout_MIN, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define GamepadOptions_inputMode_tag             1
#define GamepadOptions_dpadMode_tag              2
#define ButtonLayoutParams_left_tag              1
#define ButtonLayoutParams_right_tag             2
#define ButtonLayoutParams_startX_tag            3
#define ButtonLayoutParams_startY_tag            4
#define ButtonLayoutParams_buttonRadius_tag      5
#define ButtonLayoutParams_buttonPadding_tag     6
#define ButtonLayoutCustomOptions_params_tag     1
#define ButtonLayoutCustomOptions_paramsRight_tag 2
#define BoardOptions_hasBoardOptions_tag         1
#define BoardOptions_pinDpadUp_tag               2
#define BoardOptions_pinDpadDown_tag             3
#define BoardOptions_pinDpadLeft_tag             4
#define BoardOptions_pinDpadRight_tag            5
#define BoardOptions_pinButtonB1_tag             6
#define BoardOptions_pinButtonB2_tag             7
#define BoardOptions_pinButtonB3_tag             8
#define BoardOptions_pinButtonB4_tag             9
#define BoardOptions_pinButtonL1_tag             10
#define BoardOptions_pinButtonR1_tag             11
#define BoardOptions_pinButtonL2_tag             12
#define BoardOptions_pinButtonR2_tag             13
#define BoardOptions_pinButtonS1_tag             14
#define BoardOptions_pinButtonS2_tag             15
#define BoardOptions_pinButtonL3_tag             16
#define BoardOptions_pinButtonR3_tag             17
#define BoardOptions_pinButtonA1_tag             18
#define BoardOptions_pinButtonA2_tag             19
#define BoardOptions_buttonLayout_tag            20
#define BoardOptions_buttonLayoutRight_tag       21
#define BoardOptions_splashMode_tag              22
#define BoardOptions_splashChoice_tag            23
#define BoardOptions_splashDuration_tag          24
#define BoardOptions_i2cSDAPin_tag               25
#define BoardOptions_i2cSCLPin_tag               26
#define BoardOptions_i2cBlock_tag                27
#define BoardOptions_i2cSpeed_tag                28
#define BoardOptions_hasI2CDisplay_tag           29
#define BoardOptions_displayI2CAddress_tag       30
#define BoardOptions_displaySize_tag             31
#define BoardOptions_displayFlip_tag             32
#define BoardOptions_displayInvert_tag           33
#define BoardOptions_displaySaverTimeout_tag     34
#define BoardOptions_buttonLayoutCustomOptions_tag 35
#define BoardOptions_boardVersion_tag            36
#define AddonOptions_pinButtonTurbo_tag          1
#define AddonOptions_pinButtonReverse_tag        2
#define AddonOptions_pinSliderLS_tag             3
#define AddonOptions_pinSliderRS_tag             4
#define AddonOptions_turboShotCount_tag          5
#define AddonOptions_pinTurboLED_tag             6
#define AddonOptions_pinReverseLED_tag           7
#define AddonOptions_reverseActionUp_tag         8
#define AddonOptions_reverseActionDown_tag       9
#define AddonOptions_reverseActionLeft_tag       10
#define AddonOptions_reverseActionRight_tag      11
#define AddonOptions_i2cAnalog1219SDAPin_tag     12
#define AddonOptions_i2cAnalog1219SCLPin_tag     13
#define AddonOptions_i2cAnalog1219Block_tag      14
#define AddonOptions_i2cAnalog1219Speed_tag      15
#define AddonOptions_i2cAnalog1219Address_tag    16
#define AddonOptions_pinDualDirUp_tag            17
#define AddonOptions_pinDualDirDown_tag          18
#define AddonOptions_pinDualDirLeft_tag          19
#define AddonOptions_pinDualDirRight_tag         20
#define AddonOptions_dualDirDpadMode_tag         21
#define AddonOptions_dualDirCombineMode_tag      22
#define AddonOptions_onBoardLedMode_tag          23
#define AddonOptions_analogAdcPinX_tag           24
#define AddonOptions_analogAdcPinY_tag           25
#define AddonOptions_bootselButtonMap_tag        26
#define AddonOptions_extraButtonPin_tag          27
#define AddonOptions_extraButtonMap_tag          28
#define AddonOptions_buzzerPin_tag               29
#define AddonOptions_buzzerVolume_tag            30
#define AddonOptions_playerNumber_tag            31
#define AddonOptions_AnalogInputEnabled_tag      32
#define AddonOptions_BoardLedAddonEnabled_tag    33
#define AddonOptions_BootselButtonAddonEnabled_tag 34
#define AddonOptions_BuzzerSpeakerAddonEnabled_tag 35
#define AddonOptions_DualDirectionalInputEnabled_tag 36
#define AddonOptions_ExtraButtonAddonEnabled_tag 37
#define AddonOptions_I2CAnalog1219InputEnabled_tag 39
#define AddonOptions_JSliderInputEnabled_tag     40
#define AddonOptions_PlayerNumAddonEnabled_tag   41
#define AddonOptions_ReverseInputEnabled_tag     42
#define AddonOptions_TurboInputEnabled_tag       43
#define SplashImage_data_tag                     1
#define LEDOptions_useUserDefinedLEDs_tag        1
#define LEDOptions_dataPin_tag                   2
#define LEDOptions_ledFormat_tag                 3
#define LEDOptions_ledLayout_tag                 4
#define LEDOptions_ledsPerButton_tag             5
#define LEDOptions_brightnessMaximum_tag         6
#define LEDOptions_brightnessSteps_tag           7
#define LEDOptions_indexUp_tag                   8
#define LEDOptions_indexDown_tag                 9
#define LEDOptions_indexLeft_tag                 10
#define LEDOptions_indexRight_tag                11
#define LEDOptions_indexB1_tag                   12
#define LEDOptions_indexB2_tag                   13
#define LEDOptions_indexB3_tag                   14
#define LEDOptions_indexB4_tag                   15
#define LEDOptions_indexL1_tag                   16
#define LEDOptions_indexR1_tag                   17
#define LEDOptions_indexL2_tag                   18
#define LEDOptions_indexR2_tag                   19
#define LEDOptions_indexS1_tag                   20
#define LEDOptions_indexS2_tag                   21
#define LEDOptions_indexL3_tag                   22
#define LEDOptions_indexR3_tag                   23
#define LEDOptions_indexA1_tag                   24
#define LEDOptions_indexA2_tag                   25
#define Settings_gamepadOptions_tag              1
#define Settings_boardOptions_tag                2
#define Settings_addonOptions_tag                3
#define Settings_splashImage_tag                 4
#define Settings_ledOptions_tag                  5

/* Struct field encoding specification for nanopb */
#define Settings_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  gamepadOptions,    1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  boardOptions,      2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  addonOptions,      3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  splashImage,       4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  ledOptions,        5)
#define Settings_CALLBACK NULL
#define Settings_DEFAULT NULL
#define Settings_gamepadOptions_MSGTYPE GamepadOptions
#define Settings_boardOptions_MSGTYPE BoardOptions
#define Settings_addonOptions_MSGTYPE AddonOptions
#define Settings_splashImage_MSGTYPE SplashImage
#define Settings_ledOptions_MSGTYPE LEDOptions

#define GamepadOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UENUM,    inputMode,         1) \
X(a, STATIC,   OPTIONAL, UENUM,    dpadMode,          2)
#define GamepadOptions_CALLBACK NULL
#define GamepadOptions_DEFAULT NULL

#define ButtonLayoutParams_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    UENUM,    (layout,left,layout.left),   1) \
X(a, STATIC,   ONEOF,    UENUM,    (layout,right,layout.right),   2) \
X(a, STATIC,   OPTIONAL, INT32,    startX,            3) \
X(a, STATIC,   OPTIONAL, INT32,    startY,            4) \
X(a, STATIC,   OPTIONAL, INT32,    buttonRadius,      5) \
X(a, STATIC,   OPTIONAL, INT32,    buttonPadding,     6)
#define ButtonLayoutParams_CALLBACK NULL
#define ButtonLayoutParams_DEFAULT NULL

#define ButtonLayoutCustomOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  params,            1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  paramsRight,       2)
#define ButtonLayoutCustomOptions_CALLBACK NULL
#define ButtonLayoutCustomOptions_DEFAULT NULL
#define ButtonLayoutCustomOptions_params_MSGTYPE ButtonLayoutParams
#define ButtonLayoutCustomOptions_paramsRight_MSGTYPE ButtonLayoutParams

#define BoardOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     hasBoardOptions,   1) \
X(a, STATIC,   OPTIONAL, INT32,    pinDpadUp,         2) \
X(a, STATIC,   OPTIONAL, INT32,    pinDpadDown,       3) \
X(a, STATIC,   OPTIONAL, INT32,    pinDpadLeft,       4) \
X(a, STATIC,   OPTIONAL, INT32,    pinDpadRight,      5) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonB1,       6) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonB2,       7) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonB3,       8) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonB4,       9) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonL1,      10) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonR1,      11) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonL2,      12) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonR2,      13) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonS1,      14) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonS2,      15) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonL3,      16) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonR3,      17) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonA1,      18) \
X(a, STATIC,   OPTIONAL, INT32,    pinButtonA2,      19) \
X(a, STATIC,   OPTIONAL, UENUM,    buttonLayout,     20) \
X(a, STATIC,   OPTIONAL, UENUM,    buttonLayoutRight,  21) \
X(a, STATIC,   OPTIONAL, UENUM,    splashMode,       22) \
X(a, STATIC,   OPTIONAL, UENUM,    splashChoice,     23) \
X(a, STATIC,   OPTIONAL, INT32,    splashDuration,   24) \
X(a, STATIC,   OPTIONAL, INT32,    i2cSDAPin,        25) \
X(a, STATIC,   OPTIONAL, INT32,    i2cSCLPin,        26) \
X(a, STATIC,   OPTIONAL, INT32,    i2cBlock,         27) \
X(a, STATIC,   OPTIONAL, UINT32,   i2cSpeed,         28) \
X(a, STATIC,   OPTIONAL, BOOL,     hasI2CDisplay,    29) \
X(a, STATIC,   OPTIONAL, INT32,    displayI2CAddress,  30) \
X(a, STATIC,   OPTIONAL, INT32,    displaySize,      31) \
X(a, STATIC,   OPTIONAL, INT32,    displayFlip,      32) \
X(a, STATIC,   OPTIONAL, BOOL,     displayInvert,    33) \
X(a, STATIC,   OPTIONAL, INT32,    displaySaverTimeout,  34) \
X(a, STATIC,   OPTIONAL, MESSAGE,  buttonLayoutCustomOptions,  35) \
X(a, STATIC,   OPTIONAL, STRING,   boardVersion,     36)
#define BoardOptions_CALLBACK NULL
#define BoardOptions_DEFAULT (const pb_byte_t*)"\xa8\x01\x01\xa2\x02\x06\x76\x30\x2e\x36\x2e\x31\x00"
#define BoardOptions_buttonLayoutCustomOptions_MSGTYPE ButtonLayoutCustomOptions

#define AddonOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   pinButtonTurbo,    1) \
X(a, STATIC,   OPTIONAL, UINT32,   pinButtonReverse,   2) \
X(a, STATIC,   OPTIONAL, UINT32,   pinSliderLS,       3) \
X(a, STATIC,   OPTIONAL, UINT32,   pinSliderRS,       4) \
X(a, STATIC,   OPTIONAL, UINT32,   turboShotCount,    5) \
X(a, STATIC,   OPTIONAL, UINT32,   pinTurboLED,       6) \
X(a, STATIC,   OPTIONAL, UINT32,   pinReverseLED,     7) \
X(a, STATIC,   OPTIONAL, UINT32,   reverseActionUp,   8) \
X(a, STATIC,   OPTIONAL, UINT32,   reverseActionDown,   9) \
X(a, STATIC,   OPTIONAL, UINT32,   reverseActionLeft,  10) \
X(a, STATIC,   OPTIONAL, UINT32,   reverseActionRight,  11) \
X(a, STATIC,   OPTIONAL, UINT32,   i2cAnalog1219SDAPin,  12) \
X(a, STATIC,   OPTIONAL, UINT32,   i2cAnalog1219SCLPin,  13) \
X(a, STATIC,   OPTIONAL, INT32,    i2cAnalog1219Block,  14) \
X(a, STATIC,   OPTIONAL, UINT32,   i2cAnalog1219Speed,  15) \
X(a, STATIC,   OPTIONAL, UINT32,   i2cAnalog1219Address,  16) \
X(a, STATIC,   OPTIONAL, UINT32,   pinDualDirUp,     17) \
X(a, STATIC,   OPTIONAL, UINT32,   pinDualDirDown,   18) \
X(a, STATIC,   OPTIONAL, UINT32,   pinDualDirLeft,   19) \
X(a, STATIC,   OPTIONAL, UINT32,   pinDualDirRight,  20) \
X(a, STATIC,   OPTIONAL, UENUM,    dualDirDpadMode,  21) \
X(a, STATIC,   OPTIONAL, UINT32,   dualDirCombineMode,  22) \
X(a, STATIC,   OPTIONAL, UENUM,    onBoardLedMode,   23) \
X(a, STATIC,   OPTIONAL, UINT32,   analogAdcPinX,    24) \
X(a, STATIC,   OPTIONAL, UINT32,   analogAdcPinY,    25) \
X(a, STATIC,   OPTIONAL, UINT32,   bootselButtonMap,  26) \
X(a, STATIC,   OPTIONAL, UINT32,   extraButtonPin,   27) \
X(a, STATIC,   OPTIONAL, UINT32,   extraButtonMap,   28) \
X(a, STATIC,   OPTIONAL, UINT32,   buzzerPin,        29) \
X(a, STATIC,   OPTIONAL, UINT32,   buzzerVolume,     30) \
X(a, STATIC,   OPTIONAL, UINT32,   playerNumber,     31) \
X(a, STATIC,   OPTIONAL, BOOL,     AnalogInputEnabled,  32) \
X(a, STATIC,   OPTIONAL, BOOL,     BoardLedAddonEnabled,  33) \
X(a, STATIC,   OPTIONAL, BOOL,     BootselButtonAddonEnabled,  34) \
X(a, STATIC,   OPTIONAL, BOOL,     BuzzerSpeakerAddonEnabled,  35) \
X(a, STATIC,   OPTIONAL, BOOL,     DualDirectionalInputEnabled,  36) \
X(a, STATIC,   OPTIONAL, BOOL,     ExtraButtonAddonEnabled,  37) \
X(a, STATIC,   OPTIONAL, BOOL,     I2CAnalog1219InputEnabled,  39) \
X(a, STATIC,   OPTIONAL, BOOL,     JSliderInputEnabled,  40) \
X(a, STATIC,   OPTIONAL, BOOL,     PlayerNumAddonEnabled,  41) \
X(a, STATIC,   OPTIONAL, BOOL,     ReverseInputEnabled,  42) \
X(a, STATIC,   OPTIONAL, BOOL,     TurboInputEnabled,  43)
#define AddonOptions_CALLBACK NULL
#define AddonOptions_DEFAULT NULL

#define SplashImage_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, FIXED_LENGTH_BYTES, data,              1)
#define SplashImage_CALLBACK NULL
#define SplashImage_DEFAULT NULL

#define LEDOptions_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, BOOL,     useUserDefinedLEDs,   1) \
X(a, STATIC,   OPTIONAL, INT32,    dataPin,           2) \
X(a, STATIC,   OPTIONAL, UENUM,    ledFormat,         3) \
X(a, STATIC,   OPTIONAL, UENUM,    ledLayout,         4) \
X(a, STATIC,   OPTIONAL, UINT32,   ledsPerButton,     5) \
X(a, STATIC,   OPTIONAL, UINT32,   brightnessMaximum,   6) \
X(a, STATIC,   OPTIONAL, UINT32,   brightnessSteps,   7) \
X(a, STATIC,   OPTIONAL, INT32,    indexUp,           8) \
X(a, STATIC,   OPTIONAL, INT32,    indexDown,         9) \
X(a, STATIC,   OPTIONAL, INT32,    indexLeft,        10) \
X(a, STATIC,   OPTIONAL, INT32,    indexRight,       11) \
X(a, STATIC,   OPTIONAL, INT32,    indexB1,          12) \
X(a, STATIC,   OPTIONAL, INT32,    indexB2,          13) \
X(a, STATIC,   OPTIONAL, INT32,    indexB3,          14) \
X(a, STATIC,   OPTIONAL, INT32,    indexB4,          15) \
X(a, STATIC,   OPTIONAL, INT32,    indexL1,          16) \
X(a, STATIC,   OPTIONAL, INT32,    indexR1,          17) \
X(a, STATIC,   OPTIONAL, INT32,    indexL2,          18) \
X(a, STATIC,   OPTIONAL, INT32,    indexR2,          19) \
X(a, STATIC,   OPTIONAL, INT32,    indexS1,          20) \
X(a, STATIC,   OPTIONAL, INT32,    indexS2,          21) \
X(a, STATIC,   OPTIONAL, INT32,    indexL3,          22) \
X(a, STATIC,   OPTIONAL, INT32,    indexR3,          23) \
X(a, STATIC,   OPTIONAL, INT32,    indexA1,          24) \
X(a, STATIC,   OPTIONAL, INT32,    indexA2,          25)
#define LEDOptions_CALLBACK NULL
#define LEDOptions_DEFAULT NULL

extern const pb_msgdesc_t Settings_msg;
extern const pb_msgdesc_t GamepadOptions_msg;
extern const pb_msgdesc_t ButtonLayoutParams_msg;
extern const pb_msgdesc_t ButtonLayoutCustomOptions_msg;
extern const pb_msgdesc_t BoardOptions_msg;
extern const pb_msgdesc_t AddonOptions_msg;
extern const pb_msgdesc_t SplashImage_msg;
extern const pb_msgdesc_t LEDOptions_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Settings_fields &Settings_msg
#define GamepadOptions_fields &GamepadOptions_msg
#define ButtonLayoutParams_fields &ButtonLayoutParams_msg
#define ButtonLayoutCustomOptions_fields &ButtonLayoutCustomOptions_msg
#define BoardOptions_fields &BoardOptions_msg
#define AddonOptions_fields &AddonOptions_msg
#define SplashImage_fields &SplashImage_msg
#define LEDOptions_fields &LEDOptions_msg

/* Maximum encoded size of messages (where known) */
#define AddonOptions_size                        232
#define BoardOptions_size                        458
#define ButtonLayoutCustomOptions_size           96
#define ButtonLayoutParams_size                  46
#define GamepadOptions_size                      5
#define LEDOptions_size                          243
#define Settings_size                            1979
#define SplashImage_size                         1027

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
